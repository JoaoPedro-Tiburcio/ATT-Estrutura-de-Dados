Implementação do Shell Sort -
import time

# Implementação do Shell Sort com diferentes sequências de intervalo
def shell_sort(arr, sequence_type="shell"):
    n = len(arr)
    gaps = generate_gaps(n, sequence_type)

    # Ordena usando os gaps fornecidos pela sequência escolhida
    for gap in gaps:
        for i in range(gap, n):
            temp = arr[i]
            j = i

            # Insertion Sort modificado para usar o intervalo atual
            while j >= gap and arr[j - gap] > temp:
                arr[j] = arr[j - gap]
                j -= gap

            arr[j] = temp

# Função para gerar as sequências de intervalo
def generate_gaps(n, sequence_type):
    if sequence_type == "shell":
        # Sequência de Shell: n/2, n/4, ..., 1
        gaps = []
        gap = n // 2
        while gap > 0:
            gaps.append(gap)
            gap //= 2
        return gaps
    elif sequence_type == "knuth":
        # Sequência de Knuth: 1, 4, 13, 40, ...
        gaps = []
        gap = 1
        while gap < n:
            gaps.append(gap)
            gap = gap * 3 + 1
        return gaps[::-1]  # Inverte para começar do maior para o menor
    elif sequence_type == "hibbard":
        # Sequência de Hibbard: 1, 3, 7, 15, ...
        gaps = []
        k = 1
        gap = 2 ** k - 1
        while gap < n:
            gaps.append(gap)
            k += 1
            gap = 2 ** k - 1
        return gaps[::-1]  # Inverte para começar do maior para o menor

# Função para comparar o desempenho do Shell Sort com diferentes sequências
def compare_shell_sort():
    sizes = [10**3, 10**4, 10**5]  # Tamanhos das listas para o teste
    sequences = ["shell", "knuth", "hibbard"]
    results = []

    for size in sizes:
        # Gera uma lista aleatória de tamanho 'size'
        original_list = [i for i in range(size, 0, -1)]  # Lista reversa para pior caso
        for sequence in sequences:
            arr = original_list.copy()  # Faz uma cópia da lista original

            # Mede o tempo de execução do Shell Sort para a sequência atual
            start_time = time.time()
            shell_sort(arr, sequence_type=sequence)
            elapsed_time = time.time() - start_time

            # Armazena os resultados
            results.append({
                'size': size,
                'sequence': sequence,
                'time': elapsed_time
            })

    # Imprime os resultados
    for result in results:
        print(f"Tamanho da lista: {result['size']}")
        print(f"Sequência de Intervalo: {result['sequence'].capitalize()}")
        print(f"Tempo de execução: {result['time']:.6f} segundos")
        print('-' * 40)

# Executa a comparação
compare_shell_sort()

Como a Escolha da Sequência de Intervalos Afeta a Eficiência -
Shell Sequence:
A sequência de Shell usa divisões por 2 sucessivas. Isso resulta em uma abordagem simples, mas não muito eficiente para listas grandes.
O desempenho pode ser inconsistente, já que divisões por 2 podem não cobrir todas as possíveis "ordenações locais" adequadamente.

Knuth Sequence:
Essa sequência cresce mais lentamente que a sequência de Shell. Isso resulta em intervalos maiores inicialmente, permitindo que elementos distantes sejam ordenados com mais eficiência.
É mais eficiente que a sequência de Shell na maioria dos casos e é bem adaptada a listas de tamanho médio a grande.

Hibbard Sequence:
A sequência 2^𝑘−1 é bem distribuída e tende a funcionar melhor para listas de tamanho médio. No entanto, para listas muito grandes, pode haver problemas de eficiência, pois a última lacuna é sempre 1, o que implica mais comparações do que outras sequências.
Uma característica é que, para listas médias, oferece uma boa relação entre trocas e comparações.

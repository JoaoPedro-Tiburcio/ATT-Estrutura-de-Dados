Implementação do Binary Seach -

def binary_search(arr, target):
    low = 0
    high = len(arr) - 1

    while low <= high;
        mid = (low + high) // 2
        if arr[mid] == target:
            return mid  
        elif arr[mid] < target:
            low = mid + 1 
        else:
            high = mid - 1  
    return -1 

Exemplo de Uso -

sorted_list = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]
target = 9

index = binary_search(sorted_list, target)
print(f"O índice do elemento {target} é {index}.")

Por que a lista deve estar ordenada?
O Binary Search depende da propriedade de que a lista está ordenada para funcionar corretamente. A ideia principal do algoritmo é dividir a lista ao meio a cada iteração, descartando metade dos elementos a cada passo com base na comparação com o valor alvo.
. Se a lista estiver ordenada, ao comparar o elemento do meio com o alvo, você pode decidir de forma confiável se deve procurar na metade esquerda ou direita.
. Se a lista não estiver ordenada, essa divisão em metades perde a sua validade, já que não há garantia de que o alvo estará em uma das metades de forma previsível. 

Exemplos
Lista Ordenada (Funciona)
Lista: [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]
Procurando o número 9:
Começa com o intervalo completo: [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]. O meio é 9.
O alvo é encontrado diretamente.

Lista Não Ordenada (Não Funciona)
Lista: [3, 1, 9, 5, 13, 7, 19, 11, 17, 15]
Procurando o número 9:
Começa com o intervalo completo: [3, 1, 9, 5, 13, 7, 19, 11, 17, 15].
O meio é 13. Se 9 é menor que 13, o algoritmo tenta a metade esquerda.
No entanto, a lista não está ordenada, então essa decisão é incorreta.

Implementação do Merge Sort para Numeros Inteiros -
def merge_sort(arr):
    if len(arr) <= 1:
        return arr

    # Divide a lista no meio
    mid = len(arr) // 2
    left_half = arr[:mid]
    right_half = arr[mid:]

    # Ordena as duas metades recursivamente
    left_sorted = merge_sort(left_half)
    right_sorted = merge_sort(right_half)

    # Combina as metades ordenadas
    return merge(left_sorted, right_sorted)

def merge(left, right):
    sorted_list = []
    i = j = 0

    # Combina as listas mantendo a ordem
    while i < len(left) and j < len(right):
        if left[i] <= right[j]:
            sorted_list.append(left[i])
            i += 1
        else:
            sorted_list.append(right[j])
            j += 1

    # Adiciona os elementos restantes
    sorted_list.extend(left[i:])
    sorted_list.extend(right[j:])

    return sorted_list

# Exemplo de uso com números inteiros
numeros = [38, 27, 43, 3, 9, 82, 10]
ordenados = merge_sort(numeros)
print("Lista ordenada de números inteiros:", ordenados)

Modificação do Merge Sort para Ordenar Strings em Ordem Alfabética -
def merge_sort_strings(arr):
    if len(arr) <= 1:
        return arr

    # Divide a lista no meio
    mid = len(arr) // 2
    left_half = arr[:mid]
    right_half = arr[mid:]

    # Ordena as duas metades recursivamente
    left_sorted = merge_sort_strings(left_half)
    right_sorted = merge_sort_strings(right_half)

    # Combina as metades ordenadas
    return merge_strings(left_sorted, right_sorted)

def merge_strings(left, right):
    sorted_list = []
    i = j = 0

    # Combina as listas mantendo a ordem alfabética
    while i < len(left) and j < len(right):
        if left[i] <= right[j]:  # A comparação entre strings é alfabética
            sorted_list.append(left[i])
            i += 1
        else:
            sorted_list.append(right[j])
            j += 1

    # Adiciona os elementos restantes
    sorted_list.extend(left[i:])
    sorted_list.extend(right[j:])

    return sorted_list

# Exemplo de uso com strings
palavras = ["banana", "laranja", "maçã", "uva", "pêra", "kiwi", "abacaxi"]
ordenadas = merge_sort_strings(palavras)
print("Lista ordenada de strings:", ordenadas)

Conceito de "Dividir para Conquistar"
O princípio básico do Merge Sort é dividir a lista em partes menores, ordenar cada parte de forma recursiva e, em seguida, combinar (merge) as partes ordenadas para formar a lista final ordenada. A abordagem funciona assim:

Dividir: A lista é continuamente dividida em duas metades até que cada sublista tenha apenas um elemento.
Uma lista com um único elemento já é considerada ordenada.

Conquistar: Após a divisão, cada sublista é ordenada (ou já está ordenada por ter apenas um elemento).

Combinar: As sublistas ordenadas são então combinadas em uma lista maior, mantendo a ordem.
Esse processo de combinação é o que dá o nome ao algoritmo "Merge Sort".

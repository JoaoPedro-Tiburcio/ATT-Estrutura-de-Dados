Implementação de Radix Sort na Base 10 - 
def counting_sort(arr, exp):
    """
    Counting Sort adaptado para Radix Sort.
    Ordena os números com base no dígito atual (exp).
    """
    n = len(arr)
    output = [0] * n  # Array de saída
    count = [0] * 10  # Contagem para dígitos 0-9

    # Conta a ocorrência de cada dígito
    for i in arr:
        index = (i // exp) % 10
        count[index] += 1

    # Atualiza count[i] para indicar as posições reais dos dígitos
    for i in range(1, 10):
        count[i] += count[i - 1]

    # Constrói o array de saída
    for i in range(n - 1, -1, -1):
        index = (arr[i] // exp) % 10
        output[count[index] - 1] = arr[i]
        count[index] -= 1

    # Copia os elementos ordenados para o array original
    for i in range(n):
        arr[i] = output[i]

def radix_sort(arr):
    """
    Implementação do Radix Sort para números inteiros na base 10.
    """
    # Determina o maior número na lista para saber o número de dígitos
    max_num = max(arr)

    # Aplica counting_sort para cada dígito, com exp representando a posição do dígito
    exp = 1
    while max_num // exp > 0:
        counting_sort(arr, exp)
        exp *= 10

Teste com Números de Diferentes Tamanhos -
def test_radix_sort():
    # Listas de teste
    datasets = {
        "2 dígitos": [34, 21, 55, 12, 99, 11, 56, 88, 70, 23],
        "5 dígitos": [34567, 12345, 98765, 56789, 10001, 54321, 65432, 22222, 77777, 90000],
        "10 dígitos": [1234567890, 9876543210, 1111111111, 2222222222, 3333333333, 4444444444, 5555555555],
    }

    for description, data in datasets.items():
        print(f"\n{description} - Lista inicial: {data}")
        radix_sort(data)
        print(f"{description} - Lista ordenada: {data}")

# Executa os testes
test_radix_sort()

Radix Sort na Base 2 -
def counting_sort_binary(arr, bit_position):
    """
    Counting Sort adaptado para Radix Sort na base 2.
    Ordena os números com base no bit atual.
    """
    n = len(arr)
    output = [0] * n  # Array de saída
    count = [0] * 2  # Contagem para bits 0 e 1

    # Conta a ocorrência de cada bit
    for i in arr:
        bit = (i >> bit_position) & 1
        count[bit] += 1

    # Atualiza count[i] para indicar as posições reais dos bits
    count[1] += count[0]

    # Constrói o array de saída
    for i in range(n - 1, -1, -1):
        bit = (arr[i] >> bit_position) & 1
        output[count[bit] - 1] = arr[i]
        count[bit] -= 1

    # Copia os elementos ordenados para o array original
    for i in range(n):
        arr[i] = output[i]

def radix_sort_binary(arr):
    """
    Implementação do Radix Sort para números inteiros na base 2.
    """
    # Determina o maior número na lista para saber o número de bits necessários
    max_num = max(arr)

    # Aplica counting_sort_binary para cada bit
    bit_position = 0
    while (max_num >> bit_position) > 0:
        counting_sort_binary(arr, bit_position)
        bit_position += 1

Teste com Base 2 -
def test_radix_sort_binary():
    data = [170, 45, 75, 90, 802, 24, 2, 66]
    print("\nBase 2 - Lista inicial:", data)
    radix_sort_binary(data)
    print("Base 2 - Lista ordenada:", data)

# Executa o teste
test_radix_sort_binary()

Como lida com diferentes bases
O Radix Sort lida com diferentes bases ajustando a granularidade da ordenação em cada passo. Bases maiores (como 10) realizam menos iterações, mas consomem mais memória, enquanto bases menores (como 2) exigem mais iterações, mas podem ser mais eficientes dependendo do sistema. A escolha da base depende do tipo de dados e do ambiente de execução.








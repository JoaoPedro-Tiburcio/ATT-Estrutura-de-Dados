Implementa√ß√£o do Exponential Search
def binary_search(arr, left, right, target):
    while left <= right:
        mid = left + (right - left) // 2
        if arr[mid] == target:
            return mid
        elif arr[mid] < target:
            left = mid + 1
        else:
            right = mid - 1
    return -1

def exponential_search(arr, target):
    if len(arr) == 0:
        return -1

    if arr[0] == target:
        return 0

    index = 1
    while index < len(arr) and arr[index] <= target:
        index *= 2

    return binary_search(arr, index // 2, min(index, len(arr) - 1), target)

lista = [2, 3, 4, 10, 40, 55, 77, 89, 123, 456, 789, 1024, 2048, 4096]
elemento = 456

resultado = exponential_search(lista, elemento)
if resultado != -1:
    print(f"Elemento encontrado no √≠ndice: {resultado}")
else:
    print("Elemento n√£o encontrado na lista.")

Como o Exponential Search Funciona -
Jump Search: O algoritmo come√ßa a busca de forma semelhante ao Jump Search, ou seja, ele d√° "saltos" exponenciais pela lista, duplicando o √≠ndice a cada itera√ß√£o. Ele procura o intervalo onde o elemento pode estar localizado.
Por exemplo, se o elemento estiver na posi√ß√£o ùëò, o algoritmo procurar√° inicialmente nos √≠ndices 1, 2, 4, 8, 16, etc., at√© encontrar um √≠ndice que exceda 
ùëò ou que contenha o elemento procurado.
Binary Search: Uma vez que o intervalo onde o elemento pode estar localizado √© identificado, o algoritmo faz uma pesquisa bin√°ria (Binary Search) dentro desse intervalo para encontrar o elemento exato.

An√°lise de Desempenho - Complexidade de Tempo
Melhor caso: ùëÇ(1), quando o elemento alvo √© o primeiro elemento da lista.
Pior caso: ùëÇ(log ùëñ+log ùëñ), onde ùëñ √© o √≠ndice onde o elemento alvo est√° localizado. Isso equivale a ùëÇ(log ùëõ) para listas de tamanho ùëõ.
Caso m√©dio: ùëÇ(log ùëõ).

Complexidade de Espa√ßo - O algoritmo utiliza ùëÇ(1) espa√ßo adicional, o que significa que ele √© eficiente em termos de uso de mem√≥ria.

An√°lise de Desempenho em Listas Grandes e Pequenas -
Listas Pequenas:
O Exponential Search pode ser um pouco excessivo para listas muito pequenas, especialmente se o elemento n√£o est√° presente, j√° que a abordagem inicial de "saltos" pode resultar em verifica√ß√µes extras que poderiam ser evitadas com uma simples busca linear ou bin√°ria.
No entanto, o desempenho √© ainda aceit√°vel devido √† complexidade logar√≠tmica da pesquisa bin√°ria.

Listas Muito Grandes:
Para listas ordenadas grandes, o Exponential Search √© muito eficiente, pois rapidamente reduz o espa√ßo de busca ao procurar intervalos exponenciais, antes de refinar a busca com a pesquisa bin√°ria.
A combina√ß√£o de "salto exponencial" e a pesquisa bin√°ria torna-o particularmente adequado para grandes listas ordenadas, onde √© importante minimizar o n√∫mero de compara√ß√µes.
